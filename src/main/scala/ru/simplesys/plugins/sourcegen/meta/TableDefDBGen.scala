package ru.simplesys.plugins
package sourcegen
package meta

import com.simplesys.common.equality.SimpleEquality._
import sbt.Logger

trait TableDefDBGen {
  self: TableDef =>

  def genCreateScript(baseChangeSetID: String)(implicit resolve: SchemaDef) = {
    val tblName = this.tableDBName(resolve)

//    println(tblName)

    val createXML = <changeSet author="autogenerated" id={baseChangeSetID + "-" + this.selfRef + "-create"}>
      <createTable tableName={tblName}>
        {for (col <- this.columns) yield
        <column name={col.dbName} type={col.defaultDBTypeAsString}>
          {if (col.isMandatory) <constraints nullable="false"/>}
        </column>}
      </createTable>
    </changeSet>

    val pkXML =
      <changeSet author="autogenerated" id={baseChangeSetID + "-" + this.selfRef + "-createPK"}>
        <addPrimaryKey constraintName={pk.dbName} tableName={tblName} columnNames={this.pk.columns.map(_.dbName).mkString(",")}/>
      </changeSet>
    val ucsXML =
      for (uc <- this.ucs.filterNot(_.uniqueType === PK)) yield
        <changeSet author="autogenerated" id={baseChangeSetID + "-" + this.selfRef + "-createUC-" + uc.scalaName}>
          <addUniqueConstraint constraintName={uc.dbName} tableName={tblName} columnNames={uc.columns.map(_.dbName).mkString(",")}/>
        </changeSet>

    createXML ++ pkXML ++ ucsXML
  }

  def genFKScript(baseChangeSetID: String)(implicit resolve: SchemaDef) = {
    val tblName = this.tableDBName(resolve)
    for (fk <- this.fks) yield {
      val (from, to) = fk.columnMapping.unzip
      val thatTbl = resolve.resolveTable(fk.refTable)
      <changeSet author="autogenerated" id={baseChangeSetID + "-" + this.selfRef + "-fks-" + fk.scalaName}>
        <addForeignKeyConstraint baseTableName={tblName} baseColumnNames={from.map(this.columnsMap(_).dbName).mkString(",")} constraintName={fk.dbName} referencedTableName={thatTbl.tableDBName(resolve)}
                                 referencedColumnNames={to.map(thatTbl.columnsMap(_).dbName).mkString(",")} onDelete="RESTRICT" onUpdate="RESTRICT" deferrable="false" initiallyDeferred="false"/>
      </changeSet>
    }
  }

}
